buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'io.springfox:springfox-swagger2:2.7.0'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    //compile "org.flywaydb:flyway-core:4.2.0"
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.3'
    compile 'net.logstash.logback:logstash-logback-encoder:4.11'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.h2database:h2:1.4.194'
    // https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka
    compile group: 'org.springframework.kafka', name: 'spring-kafka', version: '1.1.1.RELEASE'
}

jar {
    baseName = 'application'

    if (System.getenv('GIT_COMMIT')) {
        version = version + '.' + System.getenv('GIT_COMMIT')
    }

    manifest {
        attributes('Implementation-Title': baseName,
                'Implementation-Version': version)
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

integrationTest.mustRunAfter test
build.dependsOn integrationTest

