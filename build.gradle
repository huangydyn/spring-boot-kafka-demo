buildscript {
    ext {
        springBootVersion = '2.2.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

ext {
    lombokVersion = "1.18.4"
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.9.0'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework:spring-aop'
    compile 'org.springframework:spring-aspects'
    compile 'io.springfox:springfox-swagger2:2.7.0'
    compile 'io.springfox:springfox-swagger-ui:2.7.0'
    compile 'org.apache.httpcomponents:httpclient:4.5'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.3'
    compile 'net.logstash.logback:logstash-logback-encoder:4.11'

    // https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka
    compile 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework:spring-aop'
    implementation 'org.springframework:spring-aspects'
    implementation 'org.apache.kafka:kafka-streams:1.0.2'
    implementation("org.projectlombok:lombok:${lombokVersion}")

    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    // implementation 'com.alibaba.otter:canal.client:1.1.1'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
}

jar {
    baseName = 'application'

    if (System.getenv('GIT_COMMIT')) {
        version = version + '.' + System.getenv('GIT_COMMIT')
    }

    manifest {
        attributes('Implementation-Title': baseName,
                'Implementation-Version': version)
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

